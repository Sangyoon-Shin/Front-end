{"ast":null,"code":"import axios from 'axios';\n\n// Axios 인스턴스 생성\nconst BASE_URL = \"https://e937-106-101-137-133.ngrok-free.app/\"; // 실제 백엔드 URL\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터: Authorization 헤더에 토큰 추가\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken'); // 로컬 스토리지에서 토큰 가져오기\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 응답 인터셉터: 401 Unauthorized 처리\naxiosInstance.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        console.warn('리프레시 토큰이 없습니다. 로그인 페이지로 리다이렉트합니다.');\n        window.location.href = '/login';\n        return Promise.reject('리프레시 토큰이 없습니다.');\n      }\n\n      // 토큰 갱신 요청\n      const refreshResponse = await axios.post(`${BASE_URL}/auth/refresh`, {\n        refreshToken\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Refresh Response:', refreshResponse);\n      const newAccessToken = refreshResponse.data.accessToken;\n      if (newAccessToken) {\n        localStorage.setItem('authToken', newAccessToken); // 새로운 토큰 저장\n        error.config.headers = error.config.headers || {};\n        error.config.headers['Authorization'] = `Bearer ${newAccessToken}`;\n        return axiosInstance(error.config); // 원래 요청 재시도\n      }\n    } catch (refreshError) {\n      console.error('토큰 갱신 실패:', refreshError);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login'; // 로그인 페이지로 리다이렉트\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","BASE_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","refreshToken","console","warn","window","location","href","refreshResponse","post","log","newAccessToken","data","accessToken","setItem","refreshError","removeItem"],"sources":["C:/Users/asx12/OneDrive/바탕 화면/react/front/Front-end/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Axios 인스턴스 생성\r\nconst BASE_URL = \"https://e937-106-101-137-133.ngrok-free.app/\"; // 실제 백엔드 URL\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\n// 요청 인터셉터: Authorization 헤더에 토큰 추가\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken'); // 로컬 스토리지에서 토큰 가져오기\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// 응답 인터셉터: 401 Unauthorized 처리\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (!refreshToken) {\r\n          console.warn('리프레시 토큰이 없습니다. 로그인 페이지로 리다이렉트합니다.');\r\n          window.location.href = '/login';\r\n          return Promise.reject('리프레시 토큰이 없습니다.');\r\n        }\r\n\r\n        // 토큰 갱신 요청\r\n        const refreshResponse = await axios.post(\r\n          `${BASE_URL}/auth/refresh`,\r\n          { refreshToken },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n\r\n        console.log('Refresh Response:', refreshResponse);\r\n        const newAccessToken = refreshResponse.data.accessToken;\r\n        if (newAccessToken) {\r\n          localStorage.setItem('authToken', newAccessToken); // 새로운 토큰 저장\r\n          error.config.headers = error.config.headers || {};\r\n          error.config.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n          return axiosInstance(error.config); // 원래 요청 재시도\r\n        }\r\n      } catch (refreshError) {\r\n        console.error('토큰 갱신 실패:', refreshError);\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('refreshToken');\r\n        window.location.href = '/login'; // 로그인 페이지로 리다이렉트\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG,8CAA8C,CAAC,CAAC;;AAEjE,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,aAAa,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CACpCQ,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD,IAAI;MACF,MAAMC,YAAY,GAAGP,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,IAAI,CAACM,YAAY,EAAE;QACjBC,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC;QACjDC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QAC/B,OAAOT,OAAO,CAACC,MAAM,CAAC,gBAAgB,CAAC;MACzC;;MAEA;MACA,MAAMS,eAAe,GAAG,MAAMxB,KAAK,CAACyB,IAAI,CACtC,GAAGxB,QAAQ,eAAe,EAC1B;QAAEiB;MAAa,CAAC,EAChB;QAAEb,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAAE,CACpD,CAAC;MAEDc,OAAO,CAACO,GAAG,CAAC,mBAAmB,EAAEF,eAAe,CAAC;MACjD,MAAMG,cAAc,GAAGH,eAAe,CAACI,IAAI,CAACC,WAAW;MACvD,IAAIF,cAAc,EAAE;QAClBhB,YAAY,CAACmB,OAAO,CAAC,WAAW,EAAEH,cAAc,CAAC,CAAC,CAAC;QACnDd,KAAK,CAACJ,MAAM,CAACJ,OAAO,GAAGQ,KAAK,CAACJ,MAAM,CAACJ,OAAO,IAAI,CAAC,CAAC;QACjDQ,KAAK,CAACJ,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUsB,cAAc,EAAE;QAClE,OAAOzB,aAAa,CAACW,KAAK,CAACJ,MAAM,CAAC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC,OAAOsB,YAAY,EAAE;MACrBZ,OAAO,CAACN,KAAK,CAAC,WAAW,EAAEkB,YAAY,CAAC;MACxCpB,YAAY,CAACqB,UAAU,CAAC,WAAW,CAAC;MACpCrB,YAAY,CAACqB,UAAU,CAAC,cAAc,CAAC;MACvCX,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;IACnC;EACF;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}