{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asx12\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\react\\\\front\\\\Front-end\\\\src\\\\pages\\\\ClassChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive'; // 반응형 페이지 만들기 위함\nimport Header from './_.js'; // 상단바 컴포넌트\nimport styles from './ClassChat.module.css';\nimport CommunicationRoom_goBack from '../images/왼쪽 나가기 버튼.png';\nimport menuIcon from '../images/메뉴버튼.png';\nimport Icon1 from '../images/하트이모지.png'; // 방 1의 아이콘\nimport Icon2 from '../images/눈이모지.png'; // 방 2의 아이콘\nimport Icon3 from '../images/폭죽이모지.png'; // 방 3의 아이콘\nimport Icon4 from '../images/내가속한방 횃불이.png'; // 하단바 아이콘들\nimport Icon5 from '../images/수업소통방 횃불이.png';\nimport Icon6 from '../images/자유소통방 횃불이.png';\n/*\r\nconst roomsData = [\r\n    { id: 1, title: '내가 속한 방 제목 1', lastMessage: '마지막 내용', icon: Icon1, selected: false },\r\n    { id: 2, title: '내가 속한 방 제목 2', lastMessage: '마지막 내용', icon: Icon2, selected: false },\r\n    { id: 3, title: '내가 속한 방 제목 3', lastMessage: '마지막 내용', icon: Icon3, selected: false },\r\n];*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClassChat = () => {\n  _s();\n  const [rooms, setRooms] = useState([]); // 여기는 하드코딩 되어있는 상태\n  // const [rooms, setRooms] = useState([]); // 방 목록 상태를 빈 배열로 초기화 --> 백엔드에서 가져오려면 이 코드로 \n  const [menuOpen, setMenuOpen] = useState(false); // 메뉴 열림/닫힘 상태\n  const [isSelectingForReport, setIsSelectingForReport] = useState(false); // 방 신고 모드 여부\n  const [isSelectingForEdit, setIsSelectingForEdit] = useState(false); // 방 편집 모드 여부\n  const [selectedRooms, setSelectedRooms] = useState([]); // 신고 및 편집을 위해 선택된 방 목록\n  const [isModalOpen, setIsModalOpen] = useState(false); // 신고 모달 열림/닫힘 상태\n  const [reportReason, setReportReason] = useState(''); // 신고 사유 상태\n  const navigate = useNavigate();\n\n  // 반응형 페이지 처리를 위한 useMediaQuery 사용\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 769px)'\n  });\n  {/*\r\n   // 방 목록을 백엔드에서 가져오기 위한 useEffect\r\n   useEffect(() => {\r\n   const fetchRooms = async () => {\r\n    try {\r\n      const response = await fetch('https://your-backend-api.com/rooms');\r\n      if (!response.ok) {\r\n        throw new Error('방 목록을 가져오는 데 실패했습니다.');\r\n      }\r\n      const data = await response.json();\r\n      setRooms(data); // 방 목록 상태 업데이트\r\n    } catch (error) {\r\n      console.error('방 목록을 가져오는 중 오류 발생:', error);\r\n      alert('방 목록을 가져오는 데 문제가 발생했습니다.');\r\n    }\r\n   };\r\n    fetchRooms();\r\n   }, []);\r\n   */}\n\n  // 실제 서버에서 개인 수업 정보 받아오면 됨\n  /*\r\n    useEffect(() => {\r\n        const fetchCourses = async () => {\r\n            try {\r\n                const response = await fetch('https://your-backend-api.com/user-courses');\r\n                if (!response.ok) {\r\n                    throw new Error('수업 정보를 가져오는 데 실패했습니다.');\r\n                }\r\n                const data = await response.json();\r\n                    // 서버에서 받은 데이터를 채팅방 형식으로 변환하여 설정\r\n                const roomsData = data.map((course) => ({\r\n                    id: course.id,\r\n                    title: course.title,\r\n                    lastMessage: course.lastMessage || '마지막 메시지가 없습니다.',\r\n                    icon: course.icon, // 각 수업의 아이콘 경로를 서버에서 제공하도록 설정\r\n                    selected: false,\r\n                }));\r\n                    setRooms(roomsData); // 수업 목록 상태 업데이트\r\n            } catch (error) {\r\n                console.error('수업 정보를 가져오는 중 오류 발생:', error);\r\n                alert('수업 정보를 가져오는 데 문제가 발생했습니다.');\r\n            }\r\n        };\r\n            fetchCourses(); // 수업 정보를 가져오는 함수 호출\r\n    }, []);\r\n    */\n  // 임시 수업 데이터 설정\n  useEffect(() => {\n    const testRoomsData = [{\n      id: 1,\n      title: '컴퓨터 과학 입문',\n      lastMessage: '안녕하세요!',\n      icon: Icon1,\n      selected: false\n    }, {\n      id: 2,\n      title: '웹 개발 기초',\n      lastMessage: '수업 준비 완료.',\n      icon: Icon2,\n      selected: false\n    }, {\n      id: 3,\n      title: '알고리즘 심화',\n      lastMessage: '숙제 확인하세요.',\n      icon: Icon3,\n      selected: false\n    }];\n    setRooms(testRoomsData); // 테스트용 데이터로 rooms 상태 업데이트\n  }, []);\n\n  // 방 ID에 맞는 페이지로 이동하기\n  const handleRoomClick = id => {\n    navigate(`/classChatRoom/${id}`); // id에 맞는 채팅방 페이지로 이동\n  };\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen); // 메뉴 토글\n  };\n\n  // 신고하기 버튼 클릭 시 방 신고 선택 모드로 전환\n  const handleReportClick = () => {\n    setIsSelectingForReport(true);\n    setIsSelectingForEdit(false);\n    setMenuOpen(false);\n  };\n\n  // 편집하기 버튼 클릭 시 방 편집 선택 모드로 전환\n  const handleEditClick = () => {\n    setIsSelectingForEdit(true);\n    setIsSelectingForReport(false);\n    setMenuOpen(false);\n  };\n  const handleSendMessage = () => {\n    // 메시지를 보내는 로직을 여기에 추가하세요\n    console.log('메시지 전송');\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault(); // Enter 키 기본 동작 방지\n      handleSendMessage();\n    }\n  };\n\n  // 방 신고 또는 편집 모드에서 체크박스 클릭 시 선택된 방 관리\n  const handleSelectRoom = id => {\n    if (selectedRooms.includes(id)) {\n      setSelectedRooms(selectedRooms.filter(roomId => roomId !== id));\n    } else {\n      setSelectedRooms([...selectedRooms, id]);\n    }\n  };\n\n  // 신고 모드 취소 함수\n  const handleCancelReport = () => {\n    setIsSelectingForReport(false); // 신고 모드 종료\n    setSelectedRooms([]); // 선택된 방 초기화\n  };\n\n  // 편집 모드 취소 함수\n  const handleCancelEdit = () => {\n    setIsSelectingForEdit(false); // 편집 모드 종료\n    setSelectedRooms([]); // 선택된 방 초기화\n  };\n\n  // 신고 버튼 클릭 시 신고 팝업 열기\n  const handleOpenReportModal = () => {\n    if (selectedRooms.length !== 1) {\n      alert(\"신고할 방을 하나만 선택하세요.\");\n    } else {\n      setReportReason(''); // 신고 모달을 열기 전에 신고 사유를 빈 문자열로 초기화\n      setIsModalOpen(true);\n    }\n  };\n\n  // 신고 팝업에서 신고하기 버튼 클릭 - fetch 사용 추가\n  const handleSubmitReport = async () => {\n    if (reportReason.trim() === '') {\n      alert('신고 사유를 입력해주세요.');\n      return;\n    }\n    const reportedRoomId = selectedRooms[0];\n    const reportData = {\n      roomId: reportedRoomId,\n      reason: reportReason\n    };\n    try {\n      // fetch API 호출\n      const response = await fetch('https://your-backend-api.com/reports', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(reportData)\n      });\n      if (!response.ok) {\n        throw new Error('신고 요청이 실패했습니다.');\n      }\n      alert('신고가 성공적으로 접수되었습니다.');\n\n      // 상태 초기화\n      setReportReason('');\n      setIsModalOpen(false);\n      setSelectedRooms([]);\n      setIsSelectingForReport(false);\n    } catch (error) {\n      console.error('신고하는 동안 오류가 발생했습니다:', error);\n      alert('신고에 실패했습니다. 다시 시도해주세요.');\n    }\n  };\n\n  // 신고 팝업에서 취소 버튼 클릭\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedRooms([]);\n    setIsSelectingForReport(false);\n    setReportReason(''); // 신고 사유 초기화\n  };\n  {/* 백엔드 연동하기 전 코드\r\n   // 선택된 방 삭제 함수\r\n   const handleDeleteRooms = () => {\r\n   if (selectedRooms.length === 0) {\r\n    alert(\"삭제할 방을 선택하세요.\");\r\n   } else {\r\n    setRooms(rooms.filter((room) => !selectedRooms.includes(room.id)));\r\n    setSelectedRooms([]);\r\n    setIsSelectingForEdit(false);\r\n    alert(\"선택된 방이 삭제되었습니다.\");\r\n   }\r\n   };\r\n   */}\n\n  // 선택된 방 삭제 함수 (백엔드 연동)\n  const handleDeleteRooms = async () => {\n    if (selectedRooms.length === 0) {\n      alert(\"삭제할 방을 선택하세요.\");\n    } else {\n      try {\n        // 각 선택된 방에 대해 DELETE 요청을 보냄\n        for (const roomId of selectedRooms) {\n          const response = await fetch(`https://your-backend-api.com/rooms/${roomId}`, {\n            method: 'DELETE'\n          });\n          if (!response.ok) {\n            throw new Error(`방 ID ${roomId}을(를) 삭제하는 데 실패했습니다.`);\n          }\n        }\n\n        // 상태 업데이트: 클라이언트 측에서도 방 삭제\n        setRooms(rooms.filter(room => !selectedRooms.includes(room.id)));\n        setSelectedRooms([]);\n        setIsSelectingForEdit(false);\n        alert(\"선택된 방이 삭제되었습니다.\");\n      } catch (error) {\n        console.error('방 삭제 중 오류 발생:', error);\n        alert('방 삭제 중 문제가 발생했습니다.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.titleContainer} ${isDesktop ? styles.desktopTitleContainer : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: CommunicationRoom_goBack,\n          className: `${styles.goBackButton} ${isDesktop ? styles.desktopGoBackButton : ''}`,\n          alt: \"\\uB4A4\\uB85C\\uAC00\\uAE30\",\n          onClick: () => navigate(-1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: `${styles.pageTitle} ${isDesktop ? styles.desktopPageTitle : ''}`,\n          children: \"\\uC218\\uC5C5 \\uC18C\\uD1B5\\uBC29\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: menuIcon,\n        className: `${styles.menuButton} ${isDesktop ? styles.desktopMenuButton : ''}`,\n        alt: \"\\uBA54\\uB274\",\n        onClick: () => setMenuOpen(!menuOpen)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.roomsList} ${isDesktop ? styles.desktopRoomsList : ''}`,\n        children: rooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.roomItem} ${isDesktop ? styles.desktopRoomItem : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: room.icon,\n            alt: `방 아이콘 ${room.id}`,\n            className: styles.roomIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles.roomInfo} ${isDesktop ? styles.desktopRoomInfo : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${styles.roomTitle} ${isDesktop ? styles.desktopRoomTitle : ''}`,\n              children: room.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.roomMessage,\n              children: room.lastMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.joinButton,\n            onClick: () => handleRoomClick(room.id),\n            children: \"\\uCC38\\uC5EC\\uD558\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this)]\n        }, room.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n};\n_s(ClassChat, \"Sqh0DpPu33zFqiuyjiIIdHJ0o00=\", false, function () {\n  return [useNavigate, useMediaQuery];\n});\n_c = ClassChat;\nexport default ClassChat;\nvar _c;\n$RefreshReg$(_c, \"ClassChat\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useMediaQuery","Header","styles","CommunicationRoom_goBack","menuIcon","Icon1","Icon2","Icon3","Icon4","Icon5","Icon6","jsxDEV","_jsxDEV","ClassChat","_s","rooms","setRooms","menuOpen","setMenuOpen","isSelectingForReport","setIsSelectingForReport","isSelectingForEdit","setIsSelectingForEdit","selectedRooms","setSelectedRooms","isModalOpen","setIsModalOpen","reportReason","setReportReason","navigate","isDesktop","query","testRoomsData","id","title","lastMessage","icon","selected","handleRoomClick","toggleMenu","handleReportClick","handleEditClick","handleSendMessage","console","log","handleKeyDown","event","key","preventDefault","handleSelectRoom","includes","filter","roomId","handleCancelReport","handleCancelEdit","handleOpenReportModal","length","alert","handleSubmitReport","trim","reportedRoomId","reportData","reason","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","handleCloseModal","handleDeleteRooms","room","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","content","titleContainer","desktopTitleContainer","src","goBackButton","desktopGoBackButton","alt","onClick","pageTitle","desktopPageTitle","menuButton","desktopMenuButton","roomsList","desktopRoomsList","map","roomItem","desktopRoomItem","roomIcon","roomInfo","desktopRoomInfo","roomTitle","desktopRoomTitle","roomMessage","joinButton","_c","$RefreshReg$"],"sources":["C:/Users/asx12/OneDrive/바탕 화면/react/front/Front-end/src/pages/ClassChat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive'; // 반응형 페이지 만들기 위함\r\nimport Header from './_.js';  // 상단바 컴포넌트\r\nimport styles from './ClassChat.module.css';\r\nimport CommunicationRoom_goBack from '../images/왼쪽 나가기 버튼.png';\r\nimport menuIcon from '../images/메뉴버튼.png';\r\nimport Icon1 from '../images/하트이모지.png';  // 방 1의 아이콘\r\nimport Icon2 from '../images/눈이모지.png';   // 방 2의 아이콘\r\nimport Icon3 from '../images/폭죽이모지.png'; // 방 3의 아이콘\r\nimport Icon4 from '../images/내가속한방 횃불이.png';  // 하단바 아이콘들\r\nimport Icon5 from '../images/수업소통방 횃불이.png';\r\nimport Icon6 from '../images/자유소통방 횃불이.png';\r\n/*\r\nconst roomsData = [\r\n    { id: 1, title: '내가 속한 방 제목 1', lastMessage: '마지막 내용', icon: Icon1, selected: false },\r\n    { id: 2, title: '내가 속한 방 제목 2', lastMessage: '마지막 내용', icon: Icon2, selected: false },\r\n    { id: 3, title: '내가 속한 방 제목 3', lastMessage: '마지막 내용', icon: Icon3, selected: false },\r\n];*/\r\n\r\nconst ClassChat = () => {\r\n    const [rooms, setRooms] = useState([]); // 여기는 하드코딩 되어있는 상태\r\n    // const [rooms, setRooms] = useState([]); // 방 목록 상태를 빈 배열로 초기화 --> 백엔드에서 가져오려면 이 코드로 \r\n    const [menuOpen, setMenuOpen] = useState(false);  // 메뉴 열림/닫힘 상태\r\n    const [isSelectingForReport, setIsSelectingForReport] = useState(false); // 방 신고 모드 여부\r\n    const [isSelectingForEdit, setIsSelectingForEdit] = useState(false); // 방 편집 모드 여부\r\n    const [selectedRooms, setSelectedRooms] = useState([]); // 신고 및 편집을 위해 선택된 방 목록\r\n    const [isModalOpen, setIsModalOpen] = useState(false); // 신고 모달 열림/닫힘 상태\r\n    const [reportReason, setReportReason] = useState(''); // 신고 사유 상태\r\n    const navigate = useNavigate();\r\n\r\n    // 반응형 페이지 처리를 위한 useMediaQuery 사용\r\n    const isDesktop = useMediaQuery({ query: '(min-width: 769px)' });\r\n\r\n    {/*\r\n   // 방 목록을 백엔드에서 가져오기 위한 useEffect\r\n   useEffect(() => {\r\n    const fetchRooms = async () => {\r\n      try {\r\n        const response = await fetch('https://your-backend-api.com/rooms');\r\n        if (!response.ok) {\r\n          throw new Error('방 목록을 가져오는 데 실패했습니다.');\r\n        }\r\n        const data = await response.json();\r\n        setRooms(data); // 방 목록 상태 업데이트\r\n      } catch (error) {\r\n        console.error('방 목록을 가져오는 중 오류 발생:', error);\r\n        alert('방 목록을 가져오는 데 문제가 발생했습니다.');\r\n      }\r\n    };\r\n\r\n    fetchRooms();\r\n  }, []);\r\n  */}\r\n\r\n    // 실제 서버에서 개인 수업 정보 받아오면 됨\r\n    /*\r\n      useEffect(() => {\r\n          const fetchCourses = async () => {\r\n              try {\r\n                  const response = await fetch('https://your-backend-api.com/user-courses');\r\n                  if (!response.ok) {\r\n                      throw new Error('수업 정보를 가져오는 데 실패했습니다.');\r\n                  }\r\n                  const data = await response.json();\r\n  \r\n                  // 서버에서 받은 데이터를 채팅방 형식으로 변환하여 설정\r\n                  const roomsData = data.map((course) => ({\r\n                      id: course.id,\r\n                      title: course.title,\r\n                      lastMessage: course.lastMessage || '마지막 메시지가 없습니다.',\r\n                      icon: course.icon, // 각 수업의 아이콘 경로를 서버에서 제공하도록 설정\r\n                      selected: false,\r\n                  }));\r\n  \r\n                  setRooms(roomsData); // 수업 목록 상태 업데이트\r\n              } catch (error) {\r\n                  console.error('수업 정보를 가져오는 중 오류 발생:', error);\r\n                  alert('수업 정보를 가져오는 데 문제가 발생했습니다.');\r\n              }\r\n          };\r\n  \r\n          fetchCourses(); // 수업 정보를 가져오는 함수 호출\r\n      }, []);\r\n  \r\n  */\r\n    // 임시 수업 데이터 설정\r\n    useEffect(() => {\r\n        const testRoomsData = [\r\n            { id: 1, title: '컴퓨터 과학 입문', lastMessage: '안녕하세요!', icon: Icon1, selected: false },\r\n            { id: 2, title: '웹 개발 기초', lastMessage: '수업 준비 완료.', icon: Icon2, selected: false },\r\n            { id: 3, title: '알고리즘 심화', lastMessage: '숙제 확인하세요.', icon: Icon3, selected: false },\r\n        ];\r\n\r\n        setRooms(testRoomsData); // 테스트용 데이터로 rooms 상태 업데이트\r\n    }, []);\r\n\r\n\r\n    // 방 ID에 맞는 페이지로 이동하기\r\n    const handleRoomClick = (id) => {\r\n        navigate(`/classChatRoom/${id}`); // id에 맞는 채팅방 페이지로 이동\r\n    };\r\n\r\n\r\n\r\n    const toggleMenu = () => {\r\n        setMenuOpen(!menuOpen);  // 메뉴 토글\r\n    };\r\n\r\n    // 신고하기 버튼 클릭 시 방 신고 선택 모드로 전환\r\n    const handleReportClick = () => {\r\n        setIsSelectingForReport(true);\r\n        setIsSelectingForEdit(false);\r\n        setMenuOpen(false);\r\n    };\r\n\r\n    // 편집하기 버튼 클릭 시 방 편집 선택 모드로 전환\r\n    const handleEditClick = () => {\r\n        setIsSelectingForEdit(true);\r\n        setIsSelectingForReport(false);\r\n        setMenuOpen(false);\r\n    };\r\n\r\n    const handleSendMessage = () => {\r\n        // 메시지를 보내는 로직을 여기에 추가하세요\r\n        console.log('메시지 전송');\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault();  // Enter 키 기본 동작 방지\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n\r\n    // 방 신고 또는 편집 모드에서 체크박스 클릭 시 선택된 방 관리\r\n    const handleSelectRoom = (id) => {\r\n        if (selectedRooms.includes(id)) {\r\n            setSelectedRooms(selectedRooms.filter((roomId) => roomId !== id));\r\n        } else {\r\n            setSelectedRooms([...selectedRooms, id]);\r\n        }\r\n    };\r\n\r\n    // 신고 모드 취소 함수\r\n    const handleCancelReport = () => {\r\n        setIsSelectingForReport(false); // 신고 모드 종료\r\n        setSelectedRooms([]); // 선택된 방 초기화\r\n    };\r\n\r\n    // 편집 모드 취소 함수\r\n    const handleCancelEdit = () => {\r\n        setIsSelectingForEdit(false); // 편집 모드 종료\r\n        setSelectedRooms([]); // 선택된 방 초기화\r\n    };\r\n\r\n    // 신고 버튼 클릭 시 신고 팝업 열기\r\n    const handleOpenReportModal = () => {\r\n        if (selectedRooms.length !== 1) {\r\n            alert(\"신고할 방을 하나만 선택하세요.\");\r\n        } else {\r\n            setReportReason('');  // 신고 모달을 열기 전에 신고 사유를 빈 문자열로 초기화\r\n            setIsModalOpen(true);\r\n        }\r\n    };\r\n\r\n    // 신고 팝업에서 신고하기 버튼 클릭 - fetch 사용 추가\r\n    const handleSubmitReport = async () => {\r\n        if (reportReason.trim() === '') {\r\n            alert('신고 사유를 입력해주세요.');\r\n            return;\r\n        }\r\n\r\n        const reportedRoomId = selectedRooms[0];\r\n        const reportData = {\r\n            roomId: reportedRoomId,\r\n            reason: reportReason,\r\n        };\r\n\r\n        try {\r\n            // fetch API 호출\r\n            const response = await fetch('https://your-backend-api.com/reports', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(reportData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('신고 요청이 실패했습니다.');\r\n            }\r\n\r\n            alert('신고가 성공적으로 접수되었습니다.');\r\n\r\n            // 상태 초기화\r\n            setReportReason('');\r\n            setIsModalOpen(false);\r\n            setSelectedRooms([]);\r\n            setIsSelectingForReport(false);\r\n        } catch (error) {\r\n            console.error('신고하는 동안 오류가 발생했습니다:', error);\r\n            alert('신고에 실패했습니다. 다시 시도해주세요.');\r\n        }\r\n    };\r\n\r\n    // 신고 팝업에서 취소 버튼 클릭\r\n    const handleCloseModal = () => {\r\n        setIsModalOpen(false);\r\n        setSelectedRooms([]);\r\n        setIsSelectingForReport(false);\r\n        setReportReason('');  // 신고 사유 초기화\r\n    };\r\n\r\n    {/* 백엔드 연동하기 전 코드\r\n  // 선택된 방 삭제 함수\r\n  const handleDeleteRooms = () => {\r\n    if (selectedRooms.length === 0) {\r\n      alert(\"삭제할 방을 선택하세요.\");\r\n    } else {\r\n      setRooms(rooms.filter((room) => !selectedRooms.includes(room.id)));\r\n      setSelectedRooms([]);\r\n      setIsSelectingForEdit(false);\r\n      alert(\"선택된 방이 삭제되었습니다.\");\r\n    }\r\n  };\r\n  */}\r\n\r\n    // 선택된 방 삭제 함수 (백엔드 연동)\r\n    const handleDeleteRooms = async () => {\r\n        if (selectedRooms.length === 0) {\r\n            alert(\"삭제할 방을 선택하세요.\");\r\n        } else {\r\n            try {\r\n                // 각 선택된 방에 대해 DELETE 요청을 보냄\r\n                for (const roomId of selectedRooms) {\r\n                    const response = await fetch(`https://your-backend-api.com/rooms/${roomId}`, {\r\n                        method: 'DELETE',\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error(`방 ID ${roomId}을(를) 삭제하는 데 실패했습니다.`);\r\n                    }\r\n                }\r\n\r\n                // 상태 업데이트: 클라이언트 측에서도 방 삭제\r\n                setRooms(rooms.filter((room) => !selectedRooms.includes(room.id)));\r\n                setSelectedRooms([]);\r\n                setIsSelectingForEdit(false);\r\n                alert(\"선택된 방이 삭제되었습니다.\");\r\n\r\n            } catch (error) {\r\n                console.error('방 삭제 중 오류 발생:', error);\r\n                alert('방 삭제 중 문제가 발생했습니다.');\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Header />\r\n            <div className={styles.content}>\r\n                <div className={`${styles.titleContainer} ${isDesktop ? styles.desktopTitleContainer : ''}`}>\r\n                    <img\r\n                        src={CommunicationRoom_goBack}\r\n                        className={`${styles.goBackButton} ${isDesktop ? styles.desktopGoBackButton : ''}`}\r\n                        alt=\"뒤로가기\"\r\n                        onClick={() => navigate(-1)}\r\n                    />\r\n                    <h1 className={`${styles.pageTitle} ${isDesktop ? styles.desktopPageTitle : ''}`}>\r\n                        수업 소통방\r\n                    </h1>\r\n                </div>\r\n\r\n                <img\r\n                    src={menuIcon}\r\n                    className={`${styles.menuButton} ${isDesktop ? styles.desktopMenuButton : ''}`}\r\n                    alt=\"메뉴\"\r\n                    onClick={() => setMenuOpen(!menuOpen)}\r\n                />\r\n\r\n                {/* 방 목록 추가 */}\r\n                <div className={`${styles.roomsList} ${isDesktop ? styles.desktopRoomsList : ''}`}>\r\n                    {rooms.map((room) => (\r\n                        <div\r\n                            key={room.id}\r\n                            className={`${styles.roomItem} ${isDesktop ? styles.desktopRoomItem : ''}`}\r\n                        >\r\n                            <img src={room.icon} alt={`방 아이콘 ${room.id}`} className={styles.roomIcon} />\r\n                            <div className={`${styles.roomInfo} ${isDesktop ? styles.desktopRoomInfo : ''}`}>\r\n                                <div className={`${styles.roomTitle} ${isDesktop ? styles.desktopRoomTitle : ''}`}>{room.title}</div>\r\n                                <div className={styles.roomMessage}>{room.lastMessage}</div>\r\n                            </div>\r\n                            <button\r\n                                className={styles.joinButton}\r\n                                onClick={() => handleRoomClick(room.id)}\r\n                            >\r\n                                참여하기\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClassChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}